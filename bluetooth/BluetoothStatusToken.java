/**
 * 
 */
package ptolemy.domains.wireless.lib.bluetooth;

import ptolemy.data.BooleanToken;
import ptolemy.data.StringToken;
import ptolemy.data.Token;
import ptolemy.kernel.util.IllegalActionException;

/** 
 * This class represents a status token generated by the BluetoothDevice actor that is output when a command has successfully or unsuccessfully been executed, or when data has been received. It contains
 * the generic type T that is formed by any arbitrary piece of data. This data is not represented in the toString() of the object. If the data is a string, however, it will be represented when toString() is called.
 * <p>
 * This class must be instantiated with two parameters: a BluetoothStatus enum element, and a data of type T.
 * <p>
 * 
 * @author Phillip Azar
 * @see BluetoothStatus
 * @see BluetoothDevice
 */
public class BluetoothStatusToken<T> extends BluetoothToken {

    /**
     * Constructs a status token with a BluetoothStatus enum element and arbitrary data point.
     * @param status
     * @param data
     */
    public BluetoothStatusToken(BluetoothStatus status, T data){
        this._status = status;
        this._data = data;
    }
    
    /**
     * Returns the status value held by this token.
     * @return BluetoothStatus status
     */
    public BluetoothStatus getStatusValue(){
        return this._status;
    }
    
    /**
     * Returns the data held by this status token.
     * @return T data
     */
    public T getData() {
        return this._data;
    }

    @Override
    public BooleanToken isEqualTo(Token rightArgument)
            throws IllegalActionException {
        if (rightArgument instanceof BluetoothStatusToken){
            BluetoothStatusToken right = (BluetoothStatusToken) rightArgument;
            if (this._status == right.getStatusValue()){
                return new BooleanToken(true);
            }
            else {
                return new BooleanToken(false);
            }
        }
        else {
            throw new IllegalActionException("The argument must be of type BluetoothStatusToken");
        }
    }


    @Override
    public String toString() {
        if (_data instanceof String || _data instanceof StringToken) {
            switch (_status){
                case STATUS_ERROR:
                    return ("ERROR," + this._data);
                case STATUS_OK:
                    return ("OK,"+ this._data);
                default:
                    return ("nil,"+ this._data); 
            }
        }
        else {
            switch (_status){
                case STATUS_ERROR:
                    return "ERROR";
                case STATUS_OK:
                    return "OK";
                default:
                    return "nil";
            }
        }
    }
    
    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////
    
    private final BluetoothStatus _status;
    private final T _data;
}
